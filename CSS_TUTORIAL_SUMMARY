Video 13 : https://www.youtube.com/watch?v=ua24185-rcw&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=13 [tutorial13_CSS_Basics.html]
    * Introduction to CSS. CSS can be embedded in three types inside your HTML code.
        1. Inline CSS   : The style attribute is specified in line on the tag itself.
        2. Internal CSS : here the CSS is kept inside the <head> tags inside <style> tags 
        3. External CSS : CSS is kept separately inside a .css file and sourced using anchor tags.

Video 14 : https://www.youtube.com/watch?v=ArUL-He_AN0&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=14 [tutorial14_selectors_in_CSS.html]
    * Some commonly used CSS properties are mentioned here : https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference
    * NOTE : Inline CSS is given precedence over Internal CSS.
    * NOTE : The code specified last takes precedence between Internal and External CSS.
        to override this rule use the "!important" attribute for the property you want to take more precedance.
    * External CSS can be sourced to your HTML code using <link>
        eg. <link rel="stylesheet" href="jayant.css">

Video 15 : https://www.youtube.com/watch?v=oPPym7UaSIo&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=15 [tutorial14_selectors_in_CSS.html]
    * Types of CSS Selectors
        CSS element selector
        CSS id selector (referenced by #)
        CSS Class selector (referenced by .)
        CSS grouping selector (Groups of classes and IDs)
    * Some common CSS attributes :
        color
        border
        border-radius
        background-color
        font-style

Video 16 : https://www.youtube.com/watch?v=buxedopZbKM&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=16 [tutorial16_chrome_developer_tools.html]
    * Your webage content can be viewed in a more detailed fashion for debug and tweak using the "Inspect" in your browser.

Video 17 : https://www.youtube.com/watch?v=buxedopZbKM&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=17 [tutorial17_fonts.html]

Video 18 : https://www.youtube.com/watch?v=buxedopZbKM&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=18 [tutorial18_colors.html]

Video 19 : https://www.youtube.com/watch?v=buxedopZbKM&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=19 [tutorial19_borders_and_background.html]
    * Few border attributes
        border-width
        border-color
        border-style
            or instead for specifying above three separately, you can club all three in one and specify as -> border: 2px solis green;
        border-radius
    * Background related attributes
        background-image
        background-repeat -> To stop image from repeating
        background-position

Video 20 : https://www.youtube.com/watch?v=buxedopZbKM&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=20 [tutorial20_CSS_box_model_margin_and_padding.html]
    * CSS Box Model : Remember MBP as a shorthand (From outside to inside) Margin Border Padding
        These can be selected using attributes : 'margin', 'border', 'padding'
    * box-sizing : Refer to inline comments in  code
    * Universal selectoe : *{  } // Attributes specified here are applied to all

Video 21 : https://www.youtube.com/watch?v=6G42rXal5-g&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=21 [tutorial21_Alignment.html]
    * To centralize any container/div use -> margin: auto;
    * The float CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it.
        float: left;
        float: right;
        clear: left;
        clear: right;
        clear: both;

Video 22 : https://www.youtube.com/watch?v=6G42rXal5-g&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=22 [tutorial22_styling_links_and_buttons.html]
    * Use 'button' tag to create a button
    * Some pseudo selectors for botton (Refer to functionality in code)
        :hover
        :visited
        :active`

Video 23 : https://www.youtube.com/watch?v=6G42rXal5-g&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=23 [tutorial23_creating_a_navigation_menu.html]
    * We can target specific casses or ids in a DM hierarchy, for eg in code if you want to target 'li' inside 'ul' inside 'navbar', then you can use CSS:
        .navbar ul li { <attributes here> }
    * NOTE : This is a basic tutorial on how to basically create a Navbar. We however will be picking Navbar mostly from Bootstrap.

Video 24 : https://www.youtube.com/watch?v=6G42rXal5-g&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=24 [tutorial24_CSS_display_property.html]
    * We can assign the behavior of a element to be inline or block using the 'display' attribute
        display: block; -> Sets the element as a block element
        display: inline-block; -> Sets the element as an inline element

Video 25 : https://www.youtube.com/watch?v=6G42rXal5-g&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=25 [tutorial25_positioning_in_html.html]
    * Types of positionings in CSS
        Fixed
        Absolute
        Relative (relative to its original position)
        Sticky

Video 26 : https://www.youtube.com/watch?v=Sj5NX_br5WY&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=26 [Folder : CWH_Gym_website_design]

Video 27 : https://www.youtube.com/watch?v=Uzuq2FGxgK4&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=27 [tutorial27_visibility_property_and_z_index.html]
    * We have an attribute called 'visibility' for components
        usage : visibility : <values>;
        The default value for 'visibility' is : 'visible'
    * z-index : For any reason if a component overlaps over another component, then which element will be visible over the top ?
        this is specified by the "z-index" attribute
            NOTE : z-index works only for positioned elements. i.e. if its absolute, relative, fixed or sticky
                   If the position is set to 'fixed', then the z-index attribute will not work.

Video 28 : https://www.youtube.com/watch?v=Uzuq2FGxgK4&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=28 [tutorial28_flexbox.html]
    * Flexbox is a VERY Important thing while designing layouts in HTML.
    * Flexbox is a one-dimensional layout method for laying out items in rows and columns.
    * CSS flexbox is a better way to align items into a container.
    * To make a container as a flexbox, we need to set its 'display' attribute as "flex".
        NOTE : All items inside a flexbox become flex items.
    * Flex Properties for a flex container :
        flex-direction : row; -> Makes all flex items span in a row. This is by DEFAULT
        flex-direction : column; -> Makes all flex items span in a colums
        flex-direction : row-reverse; -> Makes the flexbox start filling from reverse i.e right side
        flex-direction : column-reverse; -> Makes the flexbox start filling from reverse i.e from bottom
        * To make all the items inside the container wrap when the scren width is reducted, we can use 'flex-wrap' :
            flex-wrap : wrap;
            flex-wrap : wrap-reverse;
        * NOTE : we can combine flex-direction and flex-wrap with a single attribute called 'flex-flow'
            flex-flow : row-reverse wrap;
        * To center the entire content :
            justify-content : center; // All items are aligned in center
            justify-content : space-between; // All items are aligned with spaces between them
            justify-content : space-evenly; // All items are aligned with spaces between them including start and end spaces
            justify-content : space-around; // Items have the same space at their individual left and right

            align-items : center; // Aligns all items at the center vertically
            align-items : flex-end; // Aligns all items at the bottom of the container
            align-items : flex-start; // DEFAULT Value Aligns all items at the top of the container
            align-items : stretch;
    * Flex Properties for a flex Item :
        order : <some integer value>; Just like z-index, the item with the highest value of 'order' will be places at the end
                Higher the order, the later it shows up in the container.
        flex-grow : <some +ve integrervalue>; This property specifies how much of the remaining space in the flex container should be assigned to the item (the flex grow factor).
        flex-shrink : <some +ve integrervalue>; Works the same way as flex-grow, instead now it is used when the screen width is shrunk. When the screen width is reduced the container
                        with the highest value is shrunk more in proportion.
        flex-basis : <Some width in px>; When 'flex-direction' is set to row, flex-basis controls the width.
                                         When 'flex-direction' is set to column, flex-basis controls the height.
        NOTE : All the above three flex options ca be specified in a single line using the 'flex' attribute eg. :
            flex : 2 2 300px;
        align-self : <flex-start | flex-center | flex-end>;
            aligns the item at the start, center or end of the flex item respectively as per the value passed.

Video 29 : https://www.youtube.com/watch?v=Uzuq2FGxgK4&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=29 [tutorial29_responsive_design.html & tutorial29_2_viewport_height_and_width.html] 
    * Various ways to achieve responsive design
        1. setting up the viewport (The HTML Boilerplate supports by default)
        2. use max-width/max-height
        3. Using CSS Media Queries : Add On designing which we give to certain special elements, whenever the screen resizes.
                                    i.e new CSS is injected whenever the screen resizes.
        4. Using rem/vh/vw units over pixels.

        em units : usage -> "font-size : 12em;"
            Sets the font size relative to the parent container.
            for eg : If  we set the font size for the parent "container" as 10px, and then we set the font size for id "first" as 10em, then the font size for id "first" is 10 times
                     10px which is 100px
            NOTE : 'em' is used when, you want the child elements to be resized when the parent element is resized.

        rem units : usage -> "font-size : 12rem;"
            Sets the font size relative to the base <html> container.

        Link to better understanding 'em' and 'rem' : https://webdesign.tutsplus.com/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984

        'vh' and 'vw' (Viewport Height and Viewport Width)
            Assume we want to set the width and height of the container. We can usually do that using the 'width' and 'height' attributre for that container like below (Standard approach) :   
                width : 23px;
                height : 300px;

            In web development, there are many time we want the height of the page to adjust accordingly, and take the complete height. Instead of manyally adjusting multiple times, we can use 'vh' and 'vw' to set it accordingly in percentage to the viewport height and wigth.

            for eg.
                100vh : means 100% of the viewport height.
                80vw  : means 80% of the viewport width.

Video 30 : https://www.youtube.com/watch?v=WTz4A8IdeEQ&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=30 [tutorial30_media_queries.html]
    Media Queries is a way to create responsive design for your website.
    Basically it is telling your design to do something particular, like inserting some CSS, when the screen width raches a particular size.

    Media query can be inserted into the CSS by using keyword '@media'
    Usage :
        With single condition :

            @media (<Situation to check for true>)
            {
                #<id of object/objects to assign active attributes to> {
                <Set of attributes that will hold active when the 'Situation' holds true>
                }

                .<classes of object/objects to assign active attributes to> {
                <Set of attributes that will hold active when the 'Situation' holds true>
                }
            }
        
        With multiple comditions :
            @media (<Situation to check for true>) and (<Another Situation to check for true>)
            {
                #<id of object/objects to assign active attributes to> {
                <Set of attributes that will hold active when the 'Situation' holds true>
                }

                .<classes of object/objects to assign active attributes to> {
                <Set of attributes that will hold active when the 'Situation' holds true>
                }
            }

    Media Types is CSS :
        CSS recognizes multiple media types, such as 'print', 'screen' , 'braille' etc. More info can be  found here : https://www.w3.org/TR/CSS21/media.html%23media-types
        But for normal responsive design, the only Media Type that is important to us is 'screen'

        Thus we can have our media queries designated specifically for screens.
        For eg :
            @media only screen and (<Situation to check for true>) {

            }

Video 31 : https://www.youtube.com/watch?v=WwUM7qOimbo&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=31 [tutorial31_more_on_selectors.html]
    The most simple selectors we have seen are
        select by direct name, for eg :
            div {

            }
        
        select by id, for eg :
            #id1 {

            }
        
        select by class, for eg :
            .class1 {

            }

        We could also club multiple selectors by specifiying them together with comma between them, for eg :
            #id1 , #id2 { // This selects attributes for both 'id1' and 'id2'

            }

    Besides the above mentioned selectors, we also have a few other advanced selectors :
        1. To select a particular element inside any depth from another element (By providing only space between the selectors) :
            div p { // This selects element 'p' which can be of any depth inside 'div' element
                     // In the code it is P1 and P2.

            }

            NOTE : This can be clubbed with multiple items
                for eg :
                    div li p { // This infers that : 'p' inside any hierarchy inside 'li', which itself could be any hierarchy deep inside 'div'

                    }

        2. To select a particular element directly inside (Direct Child) another lement (By providing '>' symbol between them)
            div > #p2 { // This selects element with id 'p2' which is directly inside 'div', without any hierarchy in between.
                        // Which here is P4

            }

        3. To select a particular element which is specifically next to another element (its sibling).

Video 32 : https://www.youtube.com/watch?v=P-hZDC5YkJE&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=32 [tutorial32_attributes_and_nth_child_pseudo_selectors.html]
    1. Pseudo selectors are used to select a particular element whose specific attribute of interest is set.
        For eg :
            Assume there is a <input> tag whose type attribute is set as 'text', how can we select such an element .
            for this we have pseudo selectors.

            Such an element can be targetted using pseudo selctors as :
                input[type='text'] {

                }
    2. nth child pseudo selectos : Selecting the nth child inside an element.
        For eg : 
            In the code there is a <ul> tag that has 6 <li> tags inside it. Now how to select a specific index, say 3rd <li> tag ?
            We can do this by using the nth child pseudo selector.

            li:nth-child(3) { // Selects the child at index 3 for the element <li>
                <attributes to set>
            }

        What if we want a periodic assignment of the childs ?. For eg. we want every third child to be selected. For this we can assign formula to the nth-child pseudo selector
        For eg:
            li:nth-child(3n+0) { // Selects the child at every 3rd for the element <li> consecutively
                                 // HTML iterates the value of n from 1
                <attributes to set>
            }

        Similarly we can select evet odd or even child using 'odd' or 'even' as parameter in the nth-child attribute :
            Usage :
                li:nth-child(odd) {
                    
                }

                li:nth-child(even) {

                }

Video 33 : https://www.youtube.com/watch?v=P-hZDC5YkJE&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=33 [tutorial33_before_and_after_pseudo_selectors.html]
    In the code, what if we wish to insert some content after <section> ?.

    One way to do this is usual way of editing the file and add content after it.
    Another way is to use 'before' and 'after' pseudo selectors :

    Usage for 'before' pseudo selector :
        Here the 'content' attribute will be inserted before the <section>
        section::before {
            content : "This is some random content"
        }
    Usage for 'after' pseudo selector :
        Here the 'content' attribute will be inserted before the <section>
        section::after {
            content : "This is some random content"
        }

Video 34 : https://www.youtube.com/watch?v=P-hZDC5YkJE&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=34 [tutorial34_box_and_text_shadow.html]
    box-shadow attribute usage :
        box-shadow : <x offset> <y offset> <color>;
        eg:
            box-shadow : 12px 12px green;
        By default, box shadow is on the right and bottom. To bring it up and to the left you can use -ve values of x and y offsets
        eg 
            box-shadow : -12px -12px green;

        One another parameter we can provide to the box-shadow is the blur radius
        Usage :
            box-shadow : <x offset> <y offset> <blur radius> <color>;
            eg 
                box-shadow : -12px -12px 3px green;
        
        One another parameter we can provide to the box-shadow is the spread radius
        Usage :
            box-shadow : <x offset> <y offset> <blur radius> <spread radius> <color>;
            eg 
                box-shadow : -12px -12px 3px 10px green;

    text-shadow attribute usage :
        text-shadow : <x offset> <y offset> <color>;
        eg:
            text-shadow : 12px 12px green;
        By default, box shadow is on the right and bottom. To bring it up and to the left you can use -ve values of x and y offsets
        eg 
            text-shadow : -12px -12px green;
        
        Similar to box-shadow, we can also use blur radius for text-shadow as well.

Video 35 : https://www.youtube.com/watch?v=P-hZDC5YkJE&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=35 [tutorial35_css_variables_and_custom_properties.html]
    We can create variables inside the list of attributes for an element using the '--' keywords
    for eg:
        We can create a varaible that holds color blue like :
            --color_var : blur;
        Now this variable can be sourced anywhere inside the attribute list using the var(<variable name>)

        For eg, using this variable to set the background color :
            background-colr : var(--color_var) ;

        NOTE : The scope of the variables is local to only within the CSS for that element. A variable inside the CSS for one element (say h1) cannot be called or referenced inside the CSS of another element (say body).

        To make variables global so that they can be referenced anywhere inside the CSS of any of the elements, it is best to declare them under 'root'
            Usage :

                :root {
                    /* Declare all global variables here */
                    --glbl_var_1 : blue;
                    --glbl_var_2 : green;
                }

Video 36 : https://www.youtube.com/watch?v=P-hZDC5YkJE&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=36 [tutorial36_animations_and_keyframes.html]
    1. To make an animation, we first have to set the "animation-name" property. This can be set to any arbitrary name.
    2. Next property we have is "animation-duration". This basically tells for how long the animation will run.
    3. Next property we have is "animation-iteration-count". This basically tells for how many times the animation will repeat.
       We can also use the value 'infinite' for this attribute to make the animation run infinitely.

    4. To make the animation we have to first add the keyframe for that animation using the animation-name chosed.
        Syntax :
            @keyframes <animation-name chosen> { // This syntax uses the 'from' and 'to' approach
                from {

                }
                to {

                }
            }

    5. Another property we have is 'animation-fill-mode'. This makes the animation stop and stay at the last frame when the animation finishes, if its value is kept 'forwards'
                                                          This also makes the animation stop and stay at the first frame when the animation finishes, if its value is kept 'alternate'
    6. Another property we have is 'animation-timing-function', with below values :
        ease-in     : Slows down the start of the animation
        ease-out    : Slows down the end of the animation
        ease-in_out : Slows down the start and end of the animation
    6. Another property we have is 'animation-delay'.
       This makes the animation start after the specified delay.
        Usage :
            animation-delay : <time>;
            eg:
                animation-delay : 3s;
    7. Another property we have is 'animation-direction'

    Another way of creating animation keyframes, is to use the %age of the animation duration instead of the 'from' and 'to'.
    For eg : Refer to code section

    8. All the entire attributes above can be specified using a shorthand, using :
        animation : <animation-name> <animation-duration> <animation-timing-function> <animation-delay> <animation-iteration-count> <animation-fill-mode> ;

Video 37 : https://www.youtube.com/watch?v=P-hZDC5YkJE&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=37 [tutorial37_css_transitions.html]
    1. To make a transition, we first have to set the 'transition-property'. This has to be set to the attribute that you wish will transition.
        eg :
            transition-property : background-color; // This will make the background color transition
    2. Next property we have is "transition-duration". This basically tells for how long the transition will run.
    3. Another property we have is 'transition-timing-function', with below values :
        ease-in     : Slows down the start of the transition
        ease-out    : Slows down the end of the transition
        ease-in_out : Slows down the start and end of the transition
    4. Another property we have is 'transition-delay'.
       This makes the animation start after the specified delay.
        Usage :
            transition-delay : <time>;
            eg:
                transition-delay : 3s;

    5. All the entire attributes above can be specified using a shorthand, using :
        transition : <transition-property> <transition-duration> <transition-timing-function> <animation-delay> ;

        NOTE : We can emntion the transition-property as 'all' so hat all the properties for that element are transitioned.

Video 38 : https://www.youtube.com/watch?v=P-hZDC5YkJE&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=38 [tutorial38_css_tranform.html]
    Transform is used to alter or change the original shape/size or properties of an element.
    Usage :
        transform : <transform attributes>;
        
        Some transform attributes :
            none	                Defines that there should be no transformation	
            matrix(n,n,n,n,n,n)	    Defines a 2D transformation, using a matrix of six values	
            matrix3d
            (n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)	Defines a 3D transformation, using a 4x4 matrix of 16 values	
            
            translate(x,y)	        Defines a 2D translation	
            translate3d(x,y,z)	    Defines a 3D translation	
            translateX(x)	        Defines a translation, using only the value for the X-axis	
            translateY(y)	        Defines a translation, using only the value for the Y-axis	
            translateZ(z)	        Defines a 3D translation, using only the value for the Z-axis	
            scale(x,y)	            Defines a 2D scale transformation	
            scale3d(x,y,z)	        Defines a 3D scale transformation	
            scaleX(x)	            Defines a scale transformation by giving a value for the X-axis	
            scaleY(y)	            Defines a scale transformation by giving a value for the Y-axis	
            scaleZ(z)	            Defines a 3D scale transformation by giving a value for the Z-axis	
            rotate(angle)	        Defines a 2D rotation, the angle is specified in the parameter	
            rotate3d(x,y,z,angle)	Defines a 3D rotation	
            rotateX(angle)	        Defines a 3D rotation along the X-axis	
            rotateY(angle)	        Defines a 3D rotation along the Y-axis	
            rotateZ(angle)	        Defines a 3D rotation along the Z-axis	
            skew(x-angle,y-angle)	Defines a 2D skew transformation along the X- and the Y-axis	
            skewX(angle)	        Defines a 2D skew transformation along the X-axis	
            skewY(angle)	        Defines a 2D skew transformation along the Y-axis	
            perspective(n)	        Defines a perspective view for a 3D transformed element	
            initial	                Sets this property to its default value. Read about initial	
            inherit	                Inherits this property from its parent element. Read about inherit

            For example, in the code we have used the rotate transformation for 'box' to flip it 45 degrees

    The real fun and usage of Transform with Transitions.

Video 39 : https://www.youtube.com/watch?v=8KVrdL0VcAk&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=39 [tutorial39_first_fully_responsive_website.html]
    Part of making the webiste responsive starts at timestamp 1:14

    For making the website responsive we inject another CSS using media queries.
    for eg : here we make a CSS file called 'phone.css'
        for this we have triggered the CSS usning the 'media' attribute while linking the style sheet
        usage : media="screen and (max-width : 1170px)
            Here the CSS will be injected when the max-width is 1170px, beyond that the CSS will be inactive

    For smooth scrolling of your website  add below to CSS :
        html {
            scroll-behavior : smooth;
        }

Video 40 : https://www.youtube.com/watch?v=8KVrdL0VcAk&list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg&index=40 [tutorial40_css_grids.html]
    Gid for a container can be set by keeping the display property as 'grid'
        For eg : In the code
            .container {
                display : grid;
            }

        NOTE : In the above code, 'container' becomes the grid and all the childs inside 'container' become the grid items.

    To make columns in a grid for a 'container', we use the attribute 'grid-template-colums' (as used in code)
        Usage : For n columns we use
            grid-template-columns : <width of col1> <width of col2> <width of col3> ........ <width of col n>;
        eg (in code we have made 3 columns each of 100px width)
            grid-template-columns : 100px 100px 100px ;

        NOTE : we can also keep the widths as 'auto'
        eg :
            grid-template-columns : 100px 100px auto ;

    We can also use 'fr' indexes instead of 'px' of specifying widths.
        eg :
            grid-template-columns : 1fr 3fr 2fr ;
            This splits the space available to the grid into the sum of all 'fr' (here : 1+3+2 = 6).
            the fr specify the ratio in which the width is split.
            The higher fr value gets more width.

    Lets say there is a situation where we have a large number of columns. In such a case it will become tedius to specify the widths of each and individual column.
    In such a scenaario, we can choose to use the repeat function to specify a width a repeated number of times.

    We can use the 'grid-gap' attribute to set the spaces between the grid items.
        For eg : grid-gap of 2rem is used for 'container' in code.
